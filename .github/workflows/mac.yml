name: Build and Release Electron App

on:
  push:
    tags:
      - 'x*'  # Trigger on version tag (e.g., v1.0.0)

jobs:
  build:
    runs-on: macos-latest  # 使用 macOS 来构建 Mac 版本

    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Set up Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '18'  # 设置 Node.js 版本

      - name: Install dependencies with Yarn
        run: yarn install  # 使用 yarn 安装依赖

      - name: Install dmg-license only on macOS
        run: |
          if [ "$(uname)" == "Darwin" ]; then
            yarn add dmg-license --dev  # 仅在 macOS 上安装 dmg-license
          fi

      - name: Build Electron application using electron-builder for macOS
        run: npm run build -- --mac

      - name: Check if GitHub Release exists
        id: check_release
        run: |
          # Fetch the list of releases and check if the tag already exists
          existing_release=$(curl -s \
            -H "Authorization: token ${{ secrets.GITHUB_TOKEN }}" \
            "https://api.github.com/repos/${{ github.repository }}/releases/tags/${{ github.ref_name }}" \
            | jq -r '.tag_name')

          if [ "$existing_release" == "${{ github.ref_name }}" ]; then
            echo "Release with tag ${{ github.ref_name }} already exists. Skipping release creation."
            echo "exists=true" >> $GITHUB_ENV
          else
            echo "Release does not exist. Proceeding with release creation."
            echo "exists=false" >> $GITHUB_ENV
          fi

      - name: Create GitHub Release
        id: create_release
        if: env.exists == 'false'  # Only run if the release doesn't exist
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ github.ref_name }}
          release_name: Release ${{ github.ref_name }}
          draft: false
          prerelease: false

      - name: Upload macOS build to GitHub Release
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: ./dist/web-to-exe-1.0.0.dmg  # Path to your DMG
          asset_name: WebToExe-darwin-x64.dmg
          asset_content_type: application/x-apple-diskimage